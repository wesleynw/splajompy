// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLike = `-- name: AddLike :exec

INSERT INTO likes (post_id, comment_id, user_id, is_post)
VALUES ($1, $2, $3, $4)
`

type AddLikeParams struct {
	PostID    int32
	CommentID pgtype.Int4
	UserID    int32
	IsPost    bool
}

// LIKES
func (q *Queries) AddLike(ctx context.Context, arg AddLikeParams) error {
	_, err := q.db.Exec(ctx, addLike,
		arg.PostID,
		arg.CommentID,
		arg.UserID,
		arg.IsPost,
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	ID        string
	UserID    int32
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getAllPostsByFollowing = `-- name: GetAllPostsByFollowing :many
SELECT
  posts.post_id, 
  posts.text, 
  posts.created_at, 
  users.user_id, 
  users.username, 
  users.name, 
  COUNT(DISTINCT comments.comment_id) AS commentCount,
  EXISTS (
    SELECT 1 
    FROM likes
    WHERE likes.post_id = posts.post_id
      AND likes.user_id = $1
      AND likes.comment_id IS NULL
  ) AS liked
FROM posts
LEFT JOIN users ON posts.user_id = users.user_id
LEFT JOIN comments on posts.post_id = comments.post_id
WHERE posts.user_id = $1 OR EXISTS (
  SELECT 1
  FROM follows
  WHERE follows.follower_id = $1 AND follows.following_id = posts.user_id
)
GROUP BY posts.post_id, users.user_id
ORDER BY posts.created_at DESC
LIMIT $2 
OFFSET $3
`

type GetAllPostsByFollowingParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

type GetAllPostsByFollowingRow struct {
	PostID       int32
	Text         pgtype.Text
	CreatedAt    pgtype.Timestamp
	UserID       pgtype.Int4
	Username     pgtype.Text
	Name         pgtype.Text
	Commentcount int64
	Liked        bool
}

func (q *Queries) GetAllPostsByFollowing(ctx context.Context, arg GetAllPostsByFollowingParams) ([]GetAllPostsByFollowingRow, error) {
	rows, err := q.db.Query(ctx, getAllPostsByFollowing, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsByFollowingRow
	for rows.Next() {
		var i GetAllPostsByFollowingRow
		if err := rows.Scan(
			&i.PostID,
			&i.Text,
			&i.CreatedAt,
			&i.UserID,
			&i.Username,
			&i.Name,
			&i.Commentcount,
			&i.Liked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBioByUserId = `-- name: GetBioByUserId :one

SELECT text
FROM bios
WHERE user_id = $1
LIMIT 1
`

// BIOS
func (q *Queries) GetBioByUserId(ctx context.Context, userID int32) (string, error) {
	row := q.db.QueryRow(ctx, getBioByUserId, userID)
	var text string
	err := row.Scan(&text)
	return text, err
}

const getCommentsByPostId = `-- name: GetCommentsByPostId :many
SELECT
  comments.comment_id,
  comments.post_id,
  comments.user_id,
  text,
  comments.created_at,
  users.username,
  users.name
FROM comments
JOIN users ON comments.user_id = users.user_id
WHERE comments.post_id = $1
ORDER BY comments.created_at DESC
`

type GetCommentsByPostIdRow struct {
	CommentID int32
	PostID    int32
	UserID    int32
	Text      string
	CreatedAt pgtype.Timestamp
	Username  string
	Name      pgtype.Text
}

func (q *Queries) GetCommentsByPostId(ctx context.Context, postID int32) ([]GetCommentsByPostIdRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIdRow
	for rows.Next() {
		var i GetCommentsByPostIdRow
		if err := rows.Scan(
			&i.CommentID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.Username,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByPostId = `-- name: GetImagesByPostId :many
SELECT image_id, post_id, height, width, image_blob_url, display_order
FROM images
WHERE images.post_id = $1
`

func (q *Queries) GetImagesByPostId(ctx context.Context, postID int32) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ImageID,
			&i.PostID,
			&i.Height,
			&i.Width,
			&i.ImageBlobUrl,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIsLikedByUser = `-- name: GetIsLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1
  AND post_id = $2
  AND (
    CASE 
      WHEN $4::boolean = FALSE THEN comment_id = $3
      ELSE comment_id IS NULL
    END
  )
)
`

type GetIsLikedByUserParams struct {
	UserID    int32
	PostID    int32
	CommentID pgtype.Int4
	Column4   bool
}

func (q *Queries) GetIsLikedByUser(ctx context.Context, arg GetIsLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsLikedByUser,
		arg.UserID,
		arg.PostID,
		arg.CommentID,
		arg.Column4,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIsPostLikedByUser = `-- name: GetIsPostLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1 
    AND post_id = $2 
    AND comment_id IS NULL
)
`

type GetIsPostLikedByUserParams struct {
	UserID int32
	PostID int32
}

func (q *Queries) GetIsPostLikedByUser(ctx context.Context, arg GetIsPostLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsPostLikedByUser, arg.UserID, arg.PostID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPostById = `-- name: GetPostById :one
SELECT post_id, user_id, text, created_at
FROM posts
WHERE post_id = $1
`

func (q *Queries) GetPostById(ctx context.Context, postID int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getPostsIdsByUserId = `-- name: GetPostsIdsByUserId :many
SELECT post_id
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetPostsIdsByUserIdParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) GetPostsIdsByUserId(ctx context.Context, arg GetPostsIdsByUserIdParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getPostsIdsByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var post_id int32
		if err := rows.Scan(&post_id); err != nil {
			return nil, err
		}
		items = append(items, post_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, expires_at
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, username, created_at, name
FROM users
WHERE user_id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	UserID    int32
	Email     string
	Username  string
	CreatedAt pgtype.Timestamp
	Name      pgtype.Text
}

func (q *Queries) GetUserById(ctx context.Context, userID int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT user_id, email, username, created_at, name
FROM users
WHERE email = $1 OR username = $1
LIMIT 1
`

type GetUserByIdentifierRow struct {
	UserID    int32
	Email     string
	Username  string
	CreatedAt pgtype.Timestamp
	Name      pgtype.Text
}

func (q *Queries) GetUserByIdentifier(ctx context.Context, email string) (GetUserByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, email)
	var i GetUserByIdentifierRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserWithPasswordById = `-- name: GetUserWithPasswordById :one
SELECT user_id, email, password, username, created_at, name
FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUserWithPasswordById(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithPasswordById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserWithPasswordByIdentifier = `-- name: GetUserWithPasswordByIdentifier :one
SELECT user_id, email, password, username, created_at, name
FROM users
WHERE email = $1 OR username = $1
LIMIT 1
`

func (q *Queries) GetUserWithPasswordByIdentifier(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithPasswordByIdentifier, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const removeLike = `-- name: RemoveLike :exec

DELETE FROM likes
WHERE post_id = $1
AND user_id = $2
AND is_post = $3
AND ($3 = TRUE OR comment_id = $4)
`

type RemoveLikeParams struct {
	PostID    int32
	UserID    int32
	IsPost    bool
	CommentID pgtype.Int4
}

// DELETE FROM likes
// WHERE post_id = $1
//
//	AND user_id = $2
//	AND ($4 = FALSE AND comment_id = $3);
func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) error {
	_, err := q.db.Exec(ctx, removeLike,
		arg.PostID,
		arg.UserID,
		arg.IsPost,
		arg.CommentID,
	)
	return err
}
