// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	db "splajompy.com/api/v2/internal/db"
)

const addCommentToPost = `-- name: AddCommentToPost :one
INSERT INTO comments (post_id, user_id, text, facets)
VALUES ($1, $2, $3, $4)
RETURNING comment_id, post_id, user_id, text, facets, created_at
`

type AddCommentToPostParams struct {
	PostID int       `json:"postId"`
	UserID int       `json:"userId"`
	Text   string    `json:"text"`
	Facets db.Facets `json:"facets"`
}

func (q *Queries) AddCommentToPost(ctx context.Context, arg AddCommentToPostParams) (Comment, error) {
	row := q.db.QueryRow(ctx, addCommentToPost,
		arg.PostID,
		arg.UserID,
		arg.Text,
		arg.Facets,
	)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.Facets,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int) error {
	_, err := q.db.Exec(ctx, deleteComment, commentID)
	return err
}

const getCommentById = `-- name: GetCommentById :one
SELECT comment_id, post_id, user_id, text, facets, created_at
FROM comments
WHERE comment_id = $1
LIMIT 1
`

func (q *Queries) GetCommentById(ctx context.Context, commentID int) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentById, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.Facets,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsByPostId = `-- name: GetCommentsByPostId :many
SELECT
  comments.comment_id,
  comments.post_id,
  comments.user_id,
  text,
  facets,
  comments.created_at,
  users.username,
  users.name
FROM comments
JOIN users ON comments.user_id = users.user_id
WHERE comments.post_id = $1
AND NOT EXISTS (
    SELECT 1
    FROM block
    WHERE block.user_id = $1 AND target_user_id = comments.user_id
)
ORDER BY comments.created_at DESC
`

type GetCommentsByPostIdRow struct {
	CommentID int              `json:"commentId"`
	PostID    int              `json:"postId"`
	UserID    int              `json:"userId"`
	Text      string           `json:"text"`
	Facets    db.Facets        `json:"facets"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Username  string           `json:"username"`
	Name      pgtype.Text      `json:"name"`
}

func (q *Queries) GetCommentsByPostId(ctx context.Context, postID int) ([]GetCommentsByPostIdRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIdRow
	for rows.Next() {
		var i GetCommentsByPostIdRow
		if err := rows.Scan(
			&i.CommentID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.Facets,
			&i.CreatedAt,
			&i.Username,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopLikedCommentForPost = `-- name: GetTopLikedCommentForPost :one
SELECT
  c.comment_id,
  c.post_id,
  c.user_id,
  c.text,
  c.facets,
  c.created_at,
  u.username,
  u.name,
  COUNT(l.user_id) as like_count
FROM comments c
JOIN users u ON c.user_id = u.user_id
LEFT JOIN likes l ON c.comment_id = l.comment_id AND l.is_post = FALSE
WHERE c.post_id = $1
AND NOT EXISTS (
    SELECT 1
    FROM block
    WHERE block.user_id = $2 AND target_user_id = c.user_id
)
GROUP BY c.comment_id, u.username, u.name
ORDER BY like_count DESC, c.created_at DESC
LIMIT 1
`

type GetTopLikedCommentForPostParams struct {
	PostID int `json:"postId"`
	UserID int `json:"userId"`
}

type GetTopLikedCommentForPostRow struct {
	CommentID int              `json:"commentId"`
	PostID    int              `json:"postId"`
	UserID    int              `json:"userId"`
	Text      string           `json:"text"`
	Facets    db.Facets        `json:"facets"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Username  string           `json:"username"`
	Name      pgtype.Text      `json:"name"`
	LikeCount int64            `json:"likeCount"`
}

func (q *Queries) GetTopLikedCommentForPost(ctx context.Context, arg GetTopLikedCommentForPostParams) (GetTopLikedCommentForPostRow, error) {
	row := q.db.QueryRow(ctx, getTopLikedCommentForPost, arg.PostID, arg.UserID)
	var i GetTopLikedCommentForPostRow
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.Facets,
		&i.CreatedAt,
		&i.Username,
		&i.Name,
		&i.LikeCount,
	)
	return i, err
}
