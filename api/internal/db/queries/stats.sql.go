// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stats.sql

package queries

import (
	"context"
)

const getTotalComments = `-- name: GetTotalComments :one
SELECT COUNT(*)
FROM comments
`

func (q *Queries) GetTotalComments(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalComments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalFollows = `-- name: GetTotalFollows :one
SELECT COUNT(*)
FROM follows
`

func (q *Queries) GetTotalFollows(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalFollows)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalLikes = `-- name: GetTotalLikes :one
SELECT COUNT(*)
FROM likes
`

func (q *Queries) GetTotalLikes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalLikes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalNotifications = `-- name: GetTotalNotifications :one
SELECT COUNT(*)
FROM notifications
`

func (q *Queries) GetTotalNotifications(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalNotifications)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalPosts = `-- name: GetTotalPosts :one
SELECT COUNT(*)
FROM posts
`

func (q *Queries) GetTotalPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalUsers = `-- name: GetTotalUsers :one
SELECT COUNT(*)
FROM users
`

func (q *Queries) GetTotalUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}
