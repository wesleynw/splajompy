// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package queries

import (
	"context"
)

const addLike = `-- name: AddLike :exec
INSERT INTO likes (post_id, comment_id, user_id, is_post)
VALUES ($1, $2, $3, $4)
`

type AddLikeParams struct {
	PostID    int  `json:"postId"`
	CommentID *int `json:"commentId"`
	UserID    int  `json:"userId"`
	IsPost    bool `json:"isPost"`
}

func (q *Queries) AddLike(ctx context.Context, arg AddLikeParams) error {
	_, err := q.db.Exec(ctx, addLike,
		arg.PostID,
		arg.CommentID,
		arg.UserID,
		arg.IsPost,
	)
	return err
}

const getIsLikedByUser = `-- name: GetIsLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1
  AND post_id = $2
  AND (
    CASE 
      WHEN $4::boolean = FALSE THEN comment_id = $3
      ELSE comment_id IS NULL
    END
  )
)
`

type GetIsLikedByUserParams struct {
	UserID    int  `json:"userId"`
	PostID    int  `json:"postId"`
	CommentID *int `json:"commentId"`
	Column4   bool `json:"column4"`
}

func (q *Queries) GetIsLikedByUser(ctx context.Context, arg GetIsLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsLikedByUser,
		arg.UserID,
		arg.PostID,
		arg.CommentID,
		arg.Column4,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIsPostLikedByUser = `-- name: GetIsPostLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1 
    AND post_id = $2 
    AND comment_id IS NULL
)
`

type GetIsPostLikedByUserParams struct {
	UserID int `json:"userId"`
	PostID int `json:"postId"`
}

func (q *Queries) GetIsPostLikedByUser(ctx context.Context, arg GetIsPostLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsPostLikedByUser, arg.UserID, arg.PostID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPostLikesFromFollowers = `-- name: GetPostLikesFromFollowers :many
SELECT users.username, users.user_id
FROM likes
INNER JOIN users ON likes.user_id = users.user_id
WHERE post_id = $1 AND comment_id IS NULL AND
    EXISTS (
        SELECT 1
        FROM follows
        WHERE follower_id = $2 AND following_id = likes.user_id
    )
`

type GetPostLikesFromFollowersParams struct {
	PostID     int `json:"postId"`
	FollowerID int `json:"followerId"`
}

type GetPostLikesFromFollowersRow struct {
	Username string `json:"username"`
	UserID   int    `json:"userId"`
}

func (q *Queries) GetPostLikesFromFollowers(ctx context.Context, arg GetPostLikesFromFollowersParams) ([]GetPostLikesFromFollowersRow, error) {
	rows, err := q.db.Query(ctx, getPostLikesFromFollowers, arg.PostID, arg.FollowerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostLikesFromFollowersRow
	for rows.Next() {
		var i GetPostLikesFromFollowersRow
		if err := rows.Scan(&i.Username, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasLikesFromOthers = `-- name: HasLikesFromOthers :one
SELECT EXISTS (
    SELECT 1
    FROM likes
    WHERE post_id = $1 AND comment_id IS NULL AND
        user_id NOT IN (SELECT unnest FROM unnest($2::int[]))
)
`

type HasLikesFromOthersParams struct {
	PostID  int   `json:"postId"`
	Column2 []int `json:"column2"`
}

func (q *Queries) HasLikesFromOthers(ctx context.Context, arg HasLikesFromOthersParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasLikesFromOthers, arg.PostID, arg.Column2)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeLike = `-- name: RemoveLike :exec
DELETE FROM likes
WHERE post_id = $1
AND user_id = $2
AND is_post = $3
AND ($3 = TRUE OR comment_id = $4)
`

type RemoveLikeParams struct {
	PostID    int  `json:"postId"`
	UserID    int  `json:"userId"`
	IsPost    bool `json:"isPost"`
	CommentID *int `json:"commentId"`
}

func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) error {
	_, err := q.db.Exec(ctx, removeLike,
		arg.PostID,
		arg.UserID,
		arg.IsPost,
		arg.CommentID,
	)
	return err
}
