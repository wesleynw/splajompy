// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: follows.sql

package queries

import (
	"context"
)

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
WHERE following_id = $1 AND follower_id = $2
`

type DeleteFollowParams struct {
	FollowingID int32 `json:"followingId"`
	FollowerID  int32 `json:"followerId"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFollow, arg.FollowingID, arg.FollowerID)
	return err
}

const getIsUserFollowingUser = `-- name: GetIsUserFollowingUser :one
SELECT EXISTS (
  SELECT 1
  FROM follows
  WHERE follower_id = $1 AND following_id = $2
)
`

type GetIsUserFollowingUserParams struct {
	FollowerID  int32 `json:"followerId"`
	FollowingID int32 `json:"followingId"`
}

func (q *Queries) GetIsUserFollowingUser(ctx context.Context, arg GetIsUserFollowingUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsUserFollowingUser, arg.FollowerID, arg.FollowingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getMutualConnectionsForUser = `-- name: GetMutualConnectionsForUser :many
SELECT DISTINCT u.username
FROM follows f1
INNER JOIN follows f2 ON f1.following_id = f2.following_id
INNER JOIN users u ON f1.following_id = u.user_id
WHERE f1.follower_id = $1 
  AND f2.follower_id = $2
  AND f1.following_id != $1 
  AND f1.following_id != $2
LIMIT 5
`

type GetMutualConnectionsForUserParams struct {
	FollowerID   int32 `json:"followerId"`
	FollowerID_2 int32 `json:"followerId2"`
}

func (q *Queries) GetMutualConnectionsForUser(ctx context.Context, arg GetMutualConnectionsForUserParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getMutualConnectionsForUser, arg.FollowerID, arg.FollowerID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFollow = `-- name: InsertFollow :exec
INSERT INTO follows (follower_id, following_id)
VALUES ($1, $2)
`

type InsertFollowParams struct {
	FollowerID  int32 `json:"followerId"`
	FollowingID int32 `json:"followingId"`
}

func (q *Queries) InsertFollow(ctx context.Context, arg InsertFollowParams) error {
	_, err := q.db.Exec(ctx, insertFollow, arg.FollowerID, arg.FollowingID)
	return err
}
