// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"
)

const getCommentCountByPostID = `-- name: GetCommentCountByPostID :one
SELECT COUNT(*)
FROM comments
WHERE post_id = $1
`

func (q *Queries) GetCommentCountByPostID(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCommentCountByPostID, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostIdsByFollowing = `-- name: GetPostIdsByFollowing :many
SELECT post_id
FROM posts
WHERE posts.user_id = $1 OR EXISTS (
  SELECT 1
  FROM follows
  WHERE follows.follower_id = $1 AND following_id = posts.user_id
)
ORDER BY posts.created_at DESC
LIMIT $2
OFFSET $3
`

type GetPostIdsByFollowingParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetPostIdsByFollowing(ctx context.Context, arg GetPostIdsByFollowingParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getPostIdsByFollowing, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var post_id int32
		if err := rows.Scan(&post_id); err != nil {
			return nil, err
		}
		items = append(items, post_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsIdsByUserId = `-- name: GetPostsIdsByUserId :many
SELECT post_id
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetPostsIdsByUserIdParams struct {
	UserID int32
	Offset int32
	Limit  int32
}

func (q *Queries) GetPostsIdsByUserId(ctx context.Context, arg GetPostsIdsByUserIdParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getPostsIdsByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var post_id int32
		if err := rows.Scan(&post_id); err != nil {
			return nil, err
		}
		items = append(items, post_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
