// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCommentToPost = `-- name: AddCommentToPost :one
INSERT INTO comments (post_id, user_id, text)
VALUES ($1, $2, $3)
RETURNING comment_id, post_id, user_id, text, created_at
`

type AddCommentToPostParams struct {
	PostID int32  `json:"postId"`
	UserID int32  `json:"userId"`
	Text   string `json:"text"`
}

func (q *Queries) AddCommentToPost(ctx context.Context, arg AddCommentToPostParams) (Comment, error) {
	row := q.db.QueryRow(ctx, addCommentToPost, arg.PostID, arg.UserID, arg.Text)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsByPostId = `-- name: GetCommentsByPostId :many
SELECT
  comments.comment_id,
  comments.post_id,
  comments.user_id,
  text,
  comments.created_at,
  users.username,
  users.name
FROM comments
JOIN users ON comments.user_id = users.user_id
WHERE comments.post_id = $1
ORDER BY comments.created_at DESC
`

type GetCommentsByPostIdRow struct {
	CommentID int32            `json:"commentId"`
	PostID    int32            `json:"postId"`
	UserID    int32            `json:"userId"`
	Text      string           `json:"text"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Username  string           `json:"username"`
	Name      pgtype.Text      `json:"name"`
}

func (q *Queries) GetCommentsByPostId(ctx context.Context, postID int32) ([]GetCommentsByPostIdRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIdRow
	for rows.Next() {
		var i GetCommentsByPostIdRow
		if err := rows.Scan(
			&i.CommentID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.Username,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
