// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLike = `-- name: AddLike :exec
INSERT INTO likes (post_id, comment_id, user_id, is_post)
VALUES ($1, $2, $3, $4)
`

type AddLikeParams struct {
	PostID    int32       `json:"postId"`
	CommentID pgtype.Int4 `json:"commentId"`
	UserID    int32       `json:"userId"`
	IsPost    bool        `json:"isPost"`
}

func (q *Queries) AddLike(ctx context.Context, arg AddLikeParams) error {
	_, err := q.db.Exec(ctx, addLike,
		arg.PostID,
		arg.CommentID,
		arg.UserID,
		arg.IsPost,
	)
	return err
}

const getIsLikedByUser = `-- name: GetIsLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1
  AND post_id = $2
  AND (
    CASE 
      WHEN $4::boolean = FALSE THEN comment_id = $3
      ELSE comment_id IS NULL
    END
  )
)
`

type GetIsLikedByUserParams struct {
	UserID    int32       `json:"userId"`
	PostID    int32       `json:"postId"`
	CommentID pgtype.Int4 `json:"commentId"`
	Column4   bool        `json:"column4"`
}

func (q *Queries) GetIsLikedByUser(ctx context.Context, arg GetIsLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsLikedByUser,
		arg.UserID,
		arg.PostID,
		arg.CommentID,
		arg.Column4,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIsPostLikedByUser = `-- name: GetIsPostLikedByUser :one
SELECT EXISTS (
  SELECT 1
  FROM likes
  WHERE user_id = $1 
    AND post_id = $2 
    AND comment_id IS NULL
)
`

type GetIsPostLikedByUserParams struct {
	UserID int32 `json:"userId"`
	PostID int32 `json:"postId"`
}

func (q *Queries) GetIsPostLikedByUser(ctx context.Context, arg GetIsPostLikedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getIsPostLikedByUser, arg.UserID, arg.PostID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeLike = `-- name: RemoveLike :exec

DELETE FROM likes
WHERE post_id = $1
AND user_id = $2
AND is_post = $3
AND ($3 = TRUE OR comment_id = $4)
`

type RemoveLikeParams struct {
	PostID    int32       `json:"postId"`
	UserID    int32       `json:"userId"`
	IsPost    bool        `json:"isPost"`
	CommentID pgtype.Int4 `json:"commentId"`
}

// DELETE FROM likes
// WHERE post_id = $1
//
//	AND user_id = $2
//	AND ($4 = FALSE AND comment_id = $3);
func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) error {
	_, err := q.db.Exec(ctx, removeLike,
		arg.PostID,
		arg.UserID,
		arg.IsPost,
		arg.CommentID,
	)
	return err
}
