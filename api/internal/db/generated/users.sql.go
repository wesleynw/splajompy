// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	ID        string           `json:"id"`
	UserID    int32            `json:"userId"`
	ExpiresAt pgtype.Timestamp `json:"expiresAt"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password)
VALUES ($1, $2, $3)
RETURNING user_id, email, password, username, created_at, name
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getBioByUserId = `-- name: GetBioByUserId :one
SELECT text
FROM bios
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetBioByUserId(ctx context.Context, userID int32) (string, error) {
	row := q.db.QueryRow(ctx, getBioByUserId, userID)
	var text string
	err := row.Scan(&text)
	return text, err
}

const getIsEmailInUse = `-- name: GetIsEmailInUse :one
SELECT EXISTS (
  SELECT 1
  FROM users
  WHERE email = $1
)
`

func (q *Queries) GetIsEmailInUse(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, getIsEmailInUse, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getIsUsernameInUse = `-- name: GetIsUsernameInUse :one
SELECT EXISTS (
  SELECT 1
  FROM users
  WHERE username = $1
)
`

func (q *Queries) GetIsUsernameInUse(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, getIsUsernameInUse, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, expires_at
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, username, created_at, name
FROM users
WHERE user_id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	UserID    int32            `json:"userId"`
	Email     string           `json:"email"`
	Username  string           `json:"username"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Name      pgtype.Text      `json:"name"`
}

func (q *Queries) GetUserById(ctx context.Context, userID int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT user_id, email, username, created_at, name
FROM users
WHERE email = $1 OR username = $1
LIMIT 1
`

type GetUserByIdentifierRow struct {
	UserID    int32            `json:"userId"`
	Email     string           `json:"email"`
	Username  string           `json:"username"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Name      pgtype.Text      `json:"name"`
}

func (q *Queries) GetUserByIdentifier(ctx context.Context, email string) (GetUserByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, email)
	var i GetUserByIdentifierRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserWithPasswordById = `-- name: GetUserWithPasswordById :one
SELECT user_id, email, password, username, created_at, name
FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUserWithPasswordById(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithPasswordById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getUserWithPasswordByIdentifier = `-- name: GetUserWithPasswordByIdentifier :one
SELECT user_id, email, password, username, created_at, name
FROM users
WHERE email = $1 OR username = $1
LIMIT 1
`

func (q *Queries) GetUserWithPasswordByIdentifier(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithPasswordByIdentifier, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}
